use num_enum::{IntoPrimitive, TryFromPrimitive};
use strum::{AsRefStr, IntoStaticStr, VariantArray};
use sys::system_configuration::{
    kSCStatusAccessError, kSCStatusConnectionIgnore, kSCStatusConnectionNoService, kSCStatusFailed,
    kSCStatusInvalidArgument, kSCStatusKeyExists, kSCStatusLocked, kSCStatusMaxLink, kSCStatusNeedLock,
    kSCStatusNoConfigFile, kSCStatusNoKey, kSCStatusNoLink, kSCStatusNoPrefsSession, kSCStatusNoStoreServer,
    kSCStatusNoStoreSession, kSCStatusNotifierActive, kSCStatusOK, kSCStatusPrefsBusy, kSCStatusReachabilityUnknown,
    kSCStatusStale
};
use crate::helpers::u32_into_u16_unchecked;

/// A ***known type*** of status or error code generated by the most recent System Configuration
/// function call.
///
/// See [Apple's Documentation] for details.
///
/// [Apple Documentation]: https://developer.apple.com/documentation/systemconfiguration/1518026-status-and-error-codes?language=objc
#[derive(
    Debug, Copy, Clone, Ord, PartialOrd, Eq, PartialEq, Hash,
    IntoPrimitive, TryFromPrimitive, VariantArray,
    IntoStaticStr, AsRefStr,
)]
#[repr(u16)]
pub enum SCStatusType {
    /// The call was successful.
    OK = u32_into_u16_unchecked(kSCStatusOK),
    /// A nonspecific failure occurred.
    Failed = u32_into_u16_unchecked(kSCStatusFailed),
    /// An invalid argument was specified.
    InvalidArgument = u32_into_u16_unchecked(kSCStatusInvalidArgument),
    /// Permission is denied; you must be root to obtain a lock. As a result, the function could not
    /// create or access preferences.
    AccessError = u32_into_u16_unchecked(kSCStatusAccessError),
    /// No such key.
    NoKey = u32_into_u16_unchecked(kSCStatusNoKey),
    /// Data associated with key already defined.
    KeyExists = u32_into_u16_unchecked(kSCStatusKeyExists),
    /// A lock is already held.
    Locked = u32_into_u16_unchecked(kSCStatusLocked),
    /// A lock is required for this operation.
    NeedLock = u32_into_u16_unchecked(kSCStatusNeedLock),
    /// The configuration daemon session is not active.
    NoStoreSession = u32_into_u16_unchecked(kSCStatusNoStoreSession),
    /// The configuration daemon is not available or no longer available.
    NoStoreServer = u32_into_u16_unchecked(kSCStatusNoStoreServer),
    /// Notifier is currently active.
    NotifierActive = u32_into_u16_unchecked(kSCStatusNotifierActive),
    /// The preferences session is not active.
    NoPrefsSession = u32_into_u16_unchecked(kSCStatusNoPrefsSession),
    /// A preferences update is currently in progress.
    PrefsBusy = u32_into_u16_unchecked(kSCStatusPrefsBusy),
    /// The configuration file cannot be found.
    NoConfigFile = u32_into_u16_unchecked(kSCStatusNoConfigFile),
    /// No such link exists.
    NoLink = u32_into_u16_unchecked(kSCStatusNoLink),
    /// A write was attempted on a stale version of the object.
    Stale = u32_into_u16_unchecked(kSCStatusStale),
    /// The maximum link count is exceeded.
    MaxLink = u32_into_u16_unchecked(kSCStatusMaxLink),
    /// Network reachability cannot be determined.
    ReachabilityUnknown = u32_into_u16_unchecked(kSCStatusReachabilityUnknown),
    /// Network service for the connection is not available.
    ConnectionNoService = u32_into_u16_unchecked(kSCStatusConnectionNoService),
    /// Network connection information is not available at this time.
    ConnectionIgnore = u32_into_u16_unchecked(kSCStatusConnectionIgnore),
}

// implementations for status type
mod status_type_impls {
    use strum::VariantArray;
    use sys::core_foundation_sys::base::OSStatus;
    use crate::status_temp::SCStatusType;

    // // enforces at compile time that all `SCStatusType` variants fit within `u8`
    // const _: () = {
    //     let mut i = 0; while i < SCStatusType::VARIANTS.len() {
    //         i += 1;
    //         TryInto::<u8>::try_into()
    //
    //         let variant = SCStatusType::VARIANTS[i].try_into();
    //     }
    // };

    // impl fmt::Debug for SCStatusType {
    //     #[cold]
    //     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
    //         // fmt.debug
    //
    //
    //         // let mut builder = fmt.debug_struct("Error");
    //         // builder.field("code", &self.0)
    //         //     .field("message", &self.message())
    //         //     .finish()
    //     }
    // }

    // impl SCStatusType {
    //     pub fn message()
    // }

    impl From<SCStatusType> for OSStatus {
        fn from(value: SCStatusType) -> Self {
            Into::<u32>::into(value)
                .try_into().expect("These values are known to fit within `i32`")
        }
    }
}

















